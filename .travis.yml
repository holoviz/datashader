# TODO:
#
#  * restore previous sections
language: generic
sudo: false
os:
  - linux

env:
  global:
    - PYENV_VERSION=3.6
    - CHANS_DEV="-c pyviz/label/dev"
    - CHANS_REL="-c pyviz"
    - LABELS_DEV="--label dev"
    - LABELS_REL="--label dev --label main"
    - PKG_TEST_PYTHON="--test-python=py27 --test-python=py36"
    # conda build fills up travis /tmp (tmpfs)
    - TMPDIR=$HOME/tmp
    - PYPI="https://upload.pypi.org/legacy/"

cache:
  directories:
    - $HOME/miniconda

before_cache:
  - rm -rf $HOME/miniconda/pkgs
  - rm -rf $HOME/miniconda/conda-bld/*
  - rm -rf $HOME/miniconda/envs/*/conda-bld  

# quick hack to determine what tag is (improvements welcomed)
#     release: ^v(\d+|\.)*[^a-z]\d*$
# dev release: ^v(\d+|\.)*[a-z]\d*$

stages:
  - test
  - name: conda_dev_package
    if: tag =~ ^v(\d+|\.)+[a-z]\d+$
  - name: pip_dev_package
    if: tag =~ ^v(\d+|\.)+[a-z]\d+$
  - name: conda_package
    if: tag =~ ^v(\d+|\.)+[^a-z]\d+$
  - name: pip_package
    if: tag =~ ^v(\d+|\.)+[^a-z]\d+$

jobs:
  include:

    ########## DEVELOPER INSTALL ##########

    - &conda_default
      stage: test
      env: DESC="dev test_all"
      before_install:
        # brew-installed geos interferes with conda's cartopy?
        - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
            brew uninstall --ignore-dependencies geos gdal postgis;
          fi
        # install doit/pyctdev and use to install miniconda...
        - pip install pyctdev && doit miniconda_install && pip uninstall -y doit pyctdev
        - export PATH="$HOME/miniconda/bin:$PATH" && hash -r
        - conda config --set always_yes True
        # ...and now install doit/pyctdev into miniconda
        - conda install -c pyviz "pyctdev>=0.5" && doit ecosystem_setup
      install:
        - doit env_create $CHANS_DEV --python=$PYENV_VERSION
        - source activate test-environment
        - doit develop_install $CHANS_DEV
        - doit env_capture
      script:
        - doit test_all
        - export NUMBA_DISABLE_JIT=1; doit test_unit_nojit

    # python 2 flake checking typically catches python 2 syntax
    # errors where python 3's been assumed...
    - <<: *conda_default
      env: DESC="py2 flakes" PYENV_VERSION=2.7
      script: doit test_lint

    ########## END-USER PACKAGES ##########

    ## dev packages

    - &pip_default
      env: PYPI=testpypi PYPIUSER=$TPPU PYPIPASS=$TPPP TRAVIS_NOCACHE=$TRAVIS_JOB_ID
      stage: pip_dev_package
      before_install: pip install pyctdev && doit ecosystem=pip ecosystem_setup
      install:
        - unset PYENV_VERSION && pyenv global 3.6 2.7
        - doit ecosystem=pip package_build $PKG_TEST_PYTHON --test-group=all --sdist-install-build-deps
      script: doit ecosystem=pip package_upload -u $PYPIUSER -p $PYPIPASS --pypi ${PYPI}

    - &conda_pkg
      <<: *conda_default
      stage: conda_dev_package
      env: DESC="" LABELS=$LABELS_DEV CHANS=$CHANS_DEV TRAVIS_NOCACHE=$TRAVIS_JOB_ID
      install: doit package_build $CHANS $PKG_TEST_PYTHON --test-group=all
      script: doit package_upload --token=$CONDA_UPLOAD_TOKEN $LABELS

    ## release packages

    - <<: *pip_default
      env: PYPI=pypi PYPIUSER=$PPU PYPIPASS=$PPP TRAVIS_NOCACHE=$TRAVIS_JOB_ID
      stage: pip_package

    - <<: *conda_pkg
      stage: conda_package
      env: DESC="" LABELS=$LABELS_REL CHANS=$CHANS_REL TRAVIS_NOCACHE=$TRAVIS_JOB_ID

notifications:
  email: false
