name: tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
    - '*'
  workflow_dispatch:
    inputs:
      target:
        description: "How much of the test suite to run"
        type: choice
        default: default
        options:
          - default
          - full
          - downstream
      cache:
        description: "Use cache"
        type: boolean
        default: true
  schedule:
    - cron: '0 16 * * SUN'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  OMP_NUM_THREADS: 1
  OPENBLAS_NUM_THREADS: 1
  MKL_NUM_THREADS: 1
  VECLIB_MAXIMUM_THREADS: 1
  NUMEXPR_NUM_THREADS: 1
  PYDEVD_DISABLE_FILE_VALIDATION: 1

jobs:
  pre_commit:
    name: Run pre-commit
    runs-on: 'ubuntu-latest'
    steps:
      - uses: holoviz-dev/holoviz_tasks/pre-commit@v0

  setup:
    name: Setup workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ env.MATRIX }}
    steps:
      - name: Set matrix option
        run: |
          if [[ '${{ github.event_name }}' == 'workflow_dispatch' ]]; then
            OPTION=${{ github.event.inputs.target }}
          elif [[ '${{ github.event_name }}' == 'schedule' ]]; then
            OPTION="full"
          elif [[ '${{ github.event_name }}' == 'push' && '${{ github.ref_type }}' == 'tag' ]]; then
            OPTION="full"
          else
            OPTION="default"
          fi
          echo "MATRIX_OPTION=$OPTION" >> $GITHUB_ENV
      - name: Set test matrix with 'default' option
        if: env.MATRIX_OPTION == 'default'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "python-version": ["3.9", "3.10", "3.11", "3.12"],
              "exclude": [{
                  "os": "windows-latest",
                  "python-version": "3.9"
              }]
          }')
          # Won't solve on Windows + Python 3.9
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'full' option
        if: env.MATRIX_OPTION == 'full'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "python-version": ["3.9", "3.10", "3.11", "3.12"],
              "exclude": [{
                  "os": "windows-latest",
                  "python-version": "3.9"
              }]
          }')
          # Won't solve on Windows + Python 3.9
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'downstream' option
        if: env.MATRIX_OPTION == 'downstream'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest"],
              "python-version": ["3.11"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV

  test_suite:
    name: Tests on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    needs: [pre_commit, setup]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    timeout-minutes: 180
    defaults:
      run:
        shell: bash -l {0}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: holoviz-dev/holoviz_tasks/install@v0
        with:
          name: unit_test_suite
          python-version: ${{ matrix.python-version }}
          channel-priority: flexible
          channels: "pyviz/label/dev,numba,conda-forge,nodefaults"
          envs: "-o tests -o examples"
          cache: ${{ github.event.inputs.cache || github.event.inputs.cache == '' }}
          conda-update: true
        id: install
      - name: download data
        run: |
          conda activate test-environment
          python scripts/download_data.py
      - name: doit test_unit
        run: |
          conda activate test-environment
          doit test_unit
      - name: doit test_unit_nojit
        run: |
          conda activate test-environment
          doit test_unit_nojit
        env:
          NUMBA_DISABLE_JIT: 1
      - name: doit test_examples
        env:
          DASK_DATAFRAME__QUERY_PLANNING: False
        run: |
          conda activate test-environment
          doit test_examples
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
