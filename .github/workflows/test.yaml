name: tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"
  workflow_dispatch:
    inputs:
      target:
        description: "How much of the test suite to run"
        type: choice
        default: default
        options:
          - default
          - full
          - downstream
      cache:
        description: "Use cache"
        type: boolean
        default: true
  schedule:
    - cron: "0 16 * * SUN"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -l {0}

env:
  DISPLAY: ":99.0"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  COV: "--cov=./datashader --cov-report=xml"

jobs:
  pre_commit:
    name: Run pre-commit
    runs-on: "ubuntu-latest"
    steps:
      - uses: holoviz-dev/holoviz_tasks/pre-commit@v0

  setup:
    name: Setup workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ env.MATRIX }}
    steps:
      - name: Set matrix option
        run: |
          if [[ '${{ github.event_name }}' == 'workflow_dispatch' ]]; then
            OPTION=${{ github.event.inputs.target }}
          elif [[ '${{ github.event_name }}' == 'schedule' ]]; then
            OPTION="full"
          elif [[ '${{ github.event_name }}' == 'push' && '${{ github.ref_type }}' == 'tag' ]]; then
            OPTION="full"
          else
            OPTION="default"
          fi
          echo "MATRIX_OPTION=$OPTION" >> $GITHUB_ENV
      - name: Set test matrix with 'default' option
        if: env.MATRIX_OPTION == 'default'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "environment": ["test-39", "test-312"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'full' option
        if: env.MATRIX_OPTION == 'full'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "environment": ["test-39", "test-310", "test-311", "test-312"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'downstream' option
        if: env.MATRIX_OPTION == 'downstream'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest"],
              "environment": ["test-311"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV

  pixi_lock:
    name: Pixi lock
    runs-on: ubuntu-latest
    steps:
      - uses: holoviz-dev/holoviz_tasks/pixi_lock@v0
        with:
          cache: ${{ github.event.inputs.cache == 'true' || github.event.inputs.cache == '' }}

  unit_test_suite:
    name: unit:${{ matrix.environment }}:${{ matrix.os }}
    needs: [pre_commit, setup, pixi_lock]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    timeout-minutes: 120
    steps:
      - uses: holoviz-dev/holoviz_tasks/pixi_install@v0
        with:
          environments: ${{ matrix.environment }}
      - name: Test Unit
        run: |
          pixi run -e ${{ matrix.environment }} test-unit $COV
      - name: Test Unit (without JIT)
        run: |
          pixi run -e ${{ matrix.environment }} test-unit-nojit $COV
      - name: Test Examples
        run: |
          pixi run -e ${{ matrix.environment }} test-example
      - name: Test Benchmark
        run: |
          pixi run -e ${{ matrix.environment }} test-benchmark
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  core_test_suite:
    name: core:${{ matrix.environment }}:${{ matrix.os }}
    needs: [pre_commit, setup, pixi_lock]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        environment: ["test-core"]
    timeout-minutes: 120
    steps:
      - uses: holoviz-dev/holoviz_tasks/pixi_install@v0
        with:
          environments: ${{ matrix.environment }}
      - name: Test Unit
        run: |
          pixi run -e ${{ matrix.environment }} test-unit
