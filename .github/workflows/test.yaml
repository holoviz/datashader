name: tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
    - '*'
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * SUN'

jobs:
#  test_suite:
#    name: Tests on ${{ matrix.os }} with Python ${{ matrix.python-version }}
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
#        python-version: ["3.7", "3.8", "3.9", "3.10"]
#    timeout-minutes: 180
#    defaults:
#      run:
#        shell: bash -l {0}
#    env:
#      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    steps:
#      - uses: pyviz-dev/holoviz_tasks/install@v0.1a9
#        with:
#          name: unit_test_suite
#          python-version: ${{ matrix.python-version }}
#          channel-priority: strict
#          channels: pyviz/label/dev,conda-forge,nodefaults
#          envs: "-o tests -o examples"
#          cache: true
#          conda-update: true
#          conda-mamba: mamba
#        id: install
#      - name: doit test_lint
#        run: |
#          conda activate test-environment
#          doit test_lint
#      - name: doit test_unit
#        run: |
#          conda activate test-environment
#          doit test_unit
#      - name: doit test_unit_nojit
#        run: |
#          conda activate test-environment
#          doit test_unit_nojit
#        env:
#          NUMBA_DISABLE_JIT: 1
#      - name: doit test_examples
#        run: |
#          conda activate test-environment
#          doit test_examples
#      - name: codecov
#        run: |
#          conda activate test-environment
#          codecov

  test_pip:
    name: Pip tests on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest']
        #os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        #python-version: ["3.8", "3.9", "3.10"]
        python-version: ["3.10"]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies and datashader
        run: |
          pip install --upgrade pip setuptools
          pip install -v .[tests]
      - name: Env capture
        run: |
          pip list
      - name: Test
        run: |
          pytest -v datashader/tests/

  test_conda:
    name: Conda tests on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest']
        python-version: ["3.10"]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup conda and dependencies
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: env.yaml
          # Assumes toml_to_env.py has already run, e.g. in pre-commit
      - name: Install datashader
        run: |
          pip install --no-deps -v .
      - name: Env capture
        run: |
          conda list
      - name: Test
        run: |
          pytest -v datashader/tests/
