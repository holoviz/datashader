name: tests
on:
  push:
    branches:
      - master
  pull_request:
    branches:
    - '*'
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * SUN'

jobs:
  test_suite:
    name: Tests on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    timeout-minutes: 90
    defaults:
      run:
        shell: bash -l {0}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MAMBA_NO_BANNER: 1
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "100"
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          channel-priority: strict
          miniconda-version: "latest"
          channels: pyviz/label/dev,conda-forge,nodefaults
          mamba-version: "*"
      - name: Fetch unshallow
        run: git fetch --prune --tags --unshallow
      - name: conda update > 3.9
        if: matrix.python-version > '3.9'
        run: |
          conda update -n base conda
      - name: conda setup
        run: |
          eval "$(conda shell.bash hook)"
          conda create -n test-environment python=${{ matrix.python-version }} pyctdev "typing_extensions<4.2.0"
      - name: doit develop_install
        if: matrix.os != 'macos-latest'
        run: |
          eval "$(conda shell.bash hook)"
          conda activate test-environment
          doit develop_install -o tests -o examples --conda-mode=mamba
      # Temporarily hacked step as on MacOS doit develop_install updates CPython leading to pyctdev failure
      - name: doit develop_install
        if: matrix.os == 'macos-latest'
        run: |
          conda activate test-environment
          conda list
          doit develop_install -o tests -o examples --conda-mode=mamba || echo "Keep going"
          pip install --no-deps --no-build-isolation -e .
          git describe
          pip list
      - name: patch for fiona on mac and windows / 3.7
        if: (matrix.os == 'windows-latest' || matrix.os == 'macos-latest') && matrix.python-version == '3.7'
        run: |
          eval "$(conda shell.bash hook)"
          conda activate test-environment
          mamba install "fiona=1.8.19" "gdal=3.2.2"
      - name: doit env_capture
        run: |
          eval "$(conda shell.bash hook)"
          conda activate test-environment
          doit env_capture
      - name: doit test_lint
        run: |
          eval "$(conda shell.bash hook)"
          conda activate test-environment
          doit test_lint
      - name: doit test_unit
        run: |
          eval "$(conda shell.bash hook)"
          conda activate test-environment
          doit test_unit
      - name: doit test_unit_nojit
        run: |
          eval "$(conda shell.bash hook)"
          conda activate test-environment
          doit test_unit_nojit
        env:
          NUMBA_DISABLE_JIT: 1
      - name: doit test_examples
        run: |
          eval "$(conda shell.bash hook)"
          conda activate test-environment
          doit test_examples
      - name: codecov
        run: |
          eval "$(conda shell.bash hook)"
          conda activate test-environment
          codecov

  test_pip:
    name: Pip tests on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest']
        python-version: ["3.9"]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Update setuptools
        run: |
          pip install --upgrade setuptools
      - name: Install pyctdev
        run: |
          pip install pyctdev
      - name: doit develop_install
        run: |
          doit ecosystem=pip develop_install -o tests -o examples
      - name: doit env_capture
        run: |
          doit ecosystem=pip env_capture
      - name: doit test_lint
        run: |
          doit ecosystem=pip test_lint
      - name: doit test_unit
        run: |
          doit ecosystem=pip test_unit
      - name: doit test_unit_nojit
        run: |
          doit ecosystem=pip test_unit_nojit
        env:
          NUMBA_DISABLE_JIT: 1
      - name: doit test_examples
        run: |
          doit ecosystem=pip test_examples
      - name: codecov
        run: |
          codecov
